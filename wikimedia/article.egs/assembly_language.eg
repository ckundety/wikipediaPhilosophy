<page><title>Assembly language</title><id>1368</id><revision><id>440166373</id><timestamp>2011-07-18T18:53:05Z</timestamp><contributor><username>GrouchoBot</username><id>8453292</id></contributor><minor /><comment>r2.6.4) (robot Modifying: [[ka:ასემბლი]]</comment><text xml:space="preserve">:''See the [[#Related terminology|terminology]] section below for information regarding inconsistent use of the terms assembly and assembler.''[[File:Motorola 6800 Assembly Language.png|thumb | Motorola MC6800 Assembly Language.]]An '''assembly language''' is a [[low-level programming language]] for [[computer]]s, [[microprocessor]]s, [[microcontroller]]s, and other programmable devices. It implements a symbolic representation of the [[machine code]]s and other constants needed to program a given [[CPU]] architecture. This representation is usually defined by the hardware manufacturer, and is based on [[mnemonic#Assembly mnemonics|mnemonics]] that symbolize processing steps ([[instruction (computer science)|instructions]]), [[processor register]]s, memory locations, and other language features. An assembly language is thus specific to a certain physical (or virtual) computer architecture. This is in contrast to most [[high-level programming language]]s, which, ideally, are [[porting|portable]].A [[utility program]] called an ''assembler'' is used to translate assembly language statements into the target computer's machine code. The assembler performs a more or less [[isomorphism|isomorphic]] translation (a one-to-one mapping) from [[mnemonic]] statements into machine instructions and data. This is in contrast with high-level languages, in which a single statement generally results in many machine instructions.Many sophisticated assemblers offer additional mechanisms to facilitate program development, control the assembly process, and aid [[debugging]]. In particular, most modern assemblers include a [[macro (computer science)|macro]] facility (described below), and are called ''macro assemblers''.==Key concepts=====Why use an assembly language?===A simple assembler converts each assembly language statement into the corresponding machine-language statement, so at first glance seems merely a minor convenience, substituting obscure machine instructions by easily remembered names. However, consider a machine-language program loaded into memory from location 0, which has an instruction which is the machine-code equivalent of &lt;code&gt;jump to instruction 25&lt;/code&gt; or &lt;code&gt;jump forward skipping 5 instructions&lt;/code&gt;, followed by other instructions. If written in assembly language, assembled, and loaded it will produce exactly the same code, although it will have convenient [[mnemonic]]s and use symbolic labels rather than absolute locations, as in &lt;code&gt;jumpto label4&lt;/code&gt;, instead of something like hexadecimal number &lt;code&gt;A13528CD&lt;/code&gt;, the machine code for the instruction. However, if the program is modified in a way which changes the number of instructions, the destination of the jump may no longer be at location 25 or 5 instructions ahead, meaning the entire machine-language program must be modified every time such a change is made; to correct all jump destinations. If symbols have been used in an assembly language to identify the destination of the jump, the programmer need only work on the changed parts with no regard to anything else; the assembler will assemble the modified program with all jumps and so on adjusted to remain correct. Similarly, if memory availability requires the program to be loaded starting at location 123 instead of 0, the assembler will adjust all references to suit. Assembly language has many more such advantages over machine language.===Assembler===&lt;!-- This section is linked from [[Computer software]] --&gt;:''Compare with: [[Microassembler]].''Typically a modern '''assembler''' creates [[object code]] by translating assembly instruction mnemonics into [[opcode]]s, and by resolving [[identifier|symbolic names]] for memory locations and other entities.&lt;ref&gt;David Salomon (1993). ''[http://www.davidsalomon.name/assem.advertis/asl.pdf Assemblers and Loaders]''&lt;/ref&gt; The use of symbolic references is a key feature of assemblers, saving tedious calculations and manual address updates after program modifications. Most assemblers also include [[Macro (computer science)|macro]] facilities for performing textual substitution&amp;mdash;e.g., to generate common short sequences of instructions as [[inline expansion|inline]], instead of ''called'' [[subroutine]]s.Assemblers are generally simpler to write than [[compiler]]s for [[high-level language]]s, and have been available since the 1950s. Modern assemblers, especially for [[RISC]] [[Instruction set architecture|architectures]], such as [[SPARC]] or [[IBM POWER|POWER]], as well as [[x86]] and [[x86-64]], optimize [[Instruction scheduling]] to exploit the [[CPU pipeline]] efficiently.====Number of passes====There are two types of assemblers based on how many passes through the source are needed to produce the executable program.* One-pass assemblers go through the source code once and assume that all symbols will be defined before any instruction that references them.* Two-pass assemblers create a table with all symbols and their values in the first pass, then use the table in a second pass to generate code. The assembler must at least be able to determine the length of each instruction on the first pass so that the addresses of symbols can be calculated.The original reason for the use of one-pass assemblers was speed; however, modern computers perform two-pass assembly without unacceptable delay.  The advantage of the two-pass assembler is that symbols can be defined anywhere in program source code, allowing programs to be defined in more logical and meaningful ways, making two-pass assembler programs easier to read and maintain.&lt;ref&gt;{{Cite book|last=Beck|first=Leland L.|title=System Software: An Introduction to Systems Programming|publisher=Addison Wesley|year=1996|chapter=2}}&lt;/ref&gt;====High-level assemblers====More sophisticated [[high-level assembler]]s provide language abstractions such as:* Advanced control structures* High-level procedure/function declarations and invocations* High-level abstract data types, including structures/records, unions, classes, and sets* Sophisticated macro processing (although available on ordinary assemblers since late 1950s for [[IBM 700/7000 series|IBM 700 series]] and since 1960's for [[IBM/360]], amongst other machines)* [[Object-oriented programming]] features such as [[class (object-oriented programming)|classes]], [[Object (computer science)|objects]], [[Abstraction (computer science)|abstraction]], [[type polymorphism|polymorphism]], and [[inheritance (object-oriented programming)|inheritance]]&lt;ref&gt;Hyde, Randall. &quot;Chapter 12 – Classes and Objects&quot;. The Art of Assembly Language, 2nd Edition. No Starch Press. © 2010.&lt;/ref&gt;See [[#Language design|Language design]] below for more details.====Use of the term====Note that, in normal professional usage, the term ''assembler'' is used to refer both to an assembly language, and to software which assembles an assembly-language program. Thus: &quot;CP/CMS was written in [[IBM System/360|S/360]] assembler&quot; as well as &quot;ASM-H was a widely-used [[IBM System/370|S/370]] assembler.&quot;{{Citation needed|date=March 2009}}===Assembly language===A program written in assembly language consists of a series of mnemonic statements and meta-statements (known variously as directives, pseudo-instructions and pseudo-ops), comments and data. These are translated by an [[assembly language#Assembler|assembler]] to a stream of executable instructions that can be loaded into memory and executed. Assemblers can also be used to produce blocks of data from formatted and commented source code, to be used by other code.Take, for example, the instruction that tells an [[x86]]/[[IA-32]] processor to move an [[Constant (programming)|immediate 8-bit value]] into a [[processor register|register]]. The binary code for this instruction is 10110 followed by a 3-bit identifier for which register to use. The identifier for the ''AL'' register is 000, so the following [[machine code]] loads the ''AL'' register with the data 01100001.&lt;ref name=&quot;intel-1999-MOV&quot;&gt;{{cite book|title=Intel Architecture Software Developer’s Manual, Volume 2: Instruction Set Reference|year=1999|publisher=INTEL CORPORATION |pages=442 and 35|url=http://download.intel.com/design/PentiumII/manuals/24319102.PDF|accessdate=18 November 2010}}&lt;/ref&gt;10110000 01100001This binary computer code can be made more human-readable by expressing it in [[hexadecimal]] as followsB0 61Here, &lt;code&gt;B0&lt;/code&gt; means 'Move a copy of the following value into ''AL''', and &lt;code&gt;61&lt;/code&gt; is a hexadecimal representation of the value 01100001, which is 97 in [[decimal]]. Intel assembly language provides the [[mnemonic]] [[MOV (x86 instruction)|MOV]] (an abbreviation of ''move'') for instructions such as this, so the machine code above can be written as follows in assembly language, complete with an explanatory comment if required, after the semicolon. This is much easier to read and to remember.&lt;source lang=&quot;asm&quot;&gt;MOV AL, 61h       ; Load AL with 97 decimal (61 hex)&lt;/source&gt;At one time many assembly language mnemonics were three letter abbreviations, such as JMP for ''jump'', INC for ''increment'', etc. Modern processors have a much larger instruction set and many mnemonics are now longer, for example FPATAN for &quot;''[[floating point]] partial [[Inverse trigonometric functions|arctangent]]''&quot; and BOUND for &quot;''check [[Array data structure|array]] [[Index (information technology)|index]] against [[Bounds checking|bounds]]''&quot;. Many assembly language statements consist of an opcode mnemonic followed by a comma-separated list of data, arguments or parameters.&lt;ref name=&quot;intel-1999&quot;&gt;{{cite book|title=Intel Architecture Software Developer’s Manual, Volume 2: Instruction Set Reference|year=1999|publisher=INTEL CORPORATION |url=http://download.intel.com/design/PentiumII/manuals/24319102.PDF|accessdate=18 November 2010}}&lt;/ref&gt;The same mnemonic MOV refers to a family of related opcodes to do with loading, copying and moving data, whether these are immediate values, values in registers, or memory locations pointed to by values in registers.  The opcode 10110000 (&lt;code&gt;B0&lt;/code&gt;) copies an 8-bit value into the ''AL'' register, while 10110001 (&lt;code&gt;B1&lt;/code&gt;) moves it into ''CL'' and 10110010 (&lt;code&gt;B2&lt;/code&gt;) does so into ''DL''. Assembly language examples for these follow.&lt;ref name=&quot;intel-1999-MOV&quot;/&gt;&lt;source lang=&quot;asm&quot;&gt;MOV AL, 1h        ; Load AL with immediate value 1MOV CL, 2h        ; Load CL with immediate value 2MOV DL, 3h        ; Load DL with immediate value 3&lt;/source&gt;The syntax of MOV can also be more complex as the following examples show.&lt;ref&gt;{{cite web|last=Evans|first=David|title=x86 Assembly Guide|url=http://www.cs.virginia.edu/~evans/cs216/guides/x86.html|publisher=University of Virginia|accessdate=18 November 2010|year=2006}}&lt;/ref&gt;&lt;source lang=&quot;asm&quot;&gt;MOV EAX, [EBX]	  ; Move the 4 bytes in memory at the address contained in EBX into EAXMOV [ESI+EAX], CL ; Move the contents of CL into the byte at address ESI+EAX&lt;/source&gt;In each case, the MOV mnemonic is translated directly into an opcode in the ranges 88-8E, A0-A3, B0-B8, C6 or C7 by an assembler, and the programmer does not have to know or remember which.&lt;ref name=&quot;intel-1999-MOV&quot;/&gt;Transforming assembly language into machine code is the job of an assembler, and the reverse can at least partially be achieved by a [[disassembler]]. Unlike [[high-level language]]s, there is usually a [[one-to-one correspondence]] between simple assembly statements and machine language instructions. However, in some cases, an assembler may provide ''pseudoinstructions'' (essentially macros) which expand into several machine language instructions to provide commonly needed functionality. For example, for a machine that lacks a &quot;branch if greater or equal&quot; instruction, an assembler may provide a pseudoinstruction that expands to the machine's &quot;set if less than&quot; and &quot;branch if zero (on the result of the set instruction)&quot;. Most full-featured assemblers also provide a rich [[macro (computer science)|macro]] language (discussed below) which is used by vendors and programmers to generate more complex code and data sequences.Each [[computer architecture]] and [[processor architecture]] usually has its own machine language.On this level, each instruction is simple enough to be executed using a relatively small number of electronic circuits. Computers differ by the number and type of operations they support. For example, a machine with a 64-bit word length would have different circuitry from a 32-bit machine. They may also have different sizes and numbers of registers, and different representations of data types in storage. While most general-purpose computers are able to carry out essentially the same functionality, the ways they do so differ; the corresponding assembly languages may reflect these differences.Multiple sets of [[mnemonic]]s or assembly-language syntax may exist for a single instruction set, typically instantiated in different assembler programs. In these cases, the most popular one is usually that supplied by the manufacturer and used in its documentation.==Language design=====Basic elements===There is a large degree of diversity in the way the authors of assemblers categorize statements and in the nomenclature that they use. In particular, some describe anything other than a machine mnemonic or extended mnemonic as a pseudo-operation (pseudo-op). A typical assembly language consists of 3 types of instruction statements that are used to define program operations:*[[Opcode]] mnemonics*Data sections*Assembly directives====Opcode mnemonics and extended mnemonics====Instructions (statements) in assembly language are generally very simple, unlike those in [[high-level programming language|high-level language]]. Generally, a mnemonic is a symbolic name for a single executable machine language instruction (an [[opcode]]), and there is at least one opcode mnemonic defined for each machine language instruction. Each instruction typically consists of an ''operation'' or ''opcode'' plus zero or more ''[[operand]]s''. Most instructions refer to a single value, or a pair of values.  Operands can be immediate (typically one byte values, coded in the instruction itself), registers specified in the instruction, implied or the addresses of data located elsewhere in storage. This is determined by the underlying processor architecture: the assembler merely reflects how this architecture works. ''Extended mnemonics'' are often used to specify a combination of an opcode with a specific operand, e.g., the System/360 assemblers use '''B''' as an extended mnemonic for '''BC''' with a mask of 15 and '''NOP''' for '''BC''' with a mask of 0.''Extended mnemonics'' are often used to support specialized uses of instructions, often for purposes not obvious from the instruction name. For example, many CPU's do not have an explicit NOP instruction, but do have instructions that can be used for the purpose. In 8086 CPUs the instruction ''xchg ax,ax'' is used for ''nop'', with ''nop'' being a pseudo-opcode to encode the instruction ''xchg ax,ax''. Some disassemblers recognize this and will decode the ''xchg ax,ax'' instruction as ''nop''. Similarly, IBM assemblers for [[IBM System/360|System/360]] and [[IBM System/370|System/370]] use the extended mnemonics ''NOP'' and ''NOPR'' for ''BC'' and ''BCR'' with zero masks.Some assemblers also support simple built-in macro-instructions that generate two or more machine instructions. For instance, with some Z80 assemblers the instruction ''ld hl,bc'' is recognized to generate ''ld l,c'' followed by ''ld h,b''.&lt;ref&gt;http://www.z80.de/z80/z80code.htm&lt;/ref&gt; These are sometimes known as ''pseudo-opcodes''.====Data sections====There are instructions used to define data elements to hold data and variables.  They define the type of data, the length and the alignment of data. These instructions can also define whether the data is available to outside programs (programs assembled separately) or only to the program in which the data section is defined. Some assemblers classify these as pseudo-ops.====Assembly directives====Assembly directives, also called pseudo opcodes, pseudo-operations or pseudo-ops, are instructions that are executed by an assembler at assembly time, not by a CPU at run time.  They can make the assembly of the program dependent on parameters input by a programmer, so that one program can be assembled different ways, perhaps for different applications.  They also can be used to manipulate presentation of a program to make it easier to read and maintain.(For example, directives would be used to reserve storage areas and optionally their initial contents.) The names of directives often start with a dot to distinguish them from machine instructions.Symbolic assemblers let programmers associate arbitrary names (''[[label (programming language)|label]]s'' or ''symbols'') with memory locations. Usually, every constant and variable is given a name so instructions can reference those locations by name, thus promoting [[self-documenting code]]. In executable code, the name of each subroutine is associated with its entry point, so any calls to a subroutine can use its name. Inside subroutines, [[GOTO]] destinations are given labels. Some assemblers support ''local symbols'' which are lexically distinct from normal symbols (e.g., the use of &quot;10$&quot; as a GOTO destination).Some{{which?|date=December 2010}} assemblers provide flexible symbol management, letting programmers manage different [[namespace (computer science)|namespaces]], automatically calculate offsets within [[data structure]]s, and assign labels that refer to literal values or the result of simple computations performed by the assembler. Labels can also be used to initialize constants and variables with relocatable addresses.Assembly languages, like most other computer languages, allow comments to be added to assembly [[source code]] that are ignored by the assembler. Good use of comments is even more important with assembly code than with higher-level languages, as the meaning and purpose of a sequence of instructions is harder to decipher from the code itself.Wise use of these facilities can greatly simplify the problems of coding and maintaining low-level code. ''Raw'' assembly source code as generated by compilers or disassemblers—code without any comments, meaningful symbols, or data definitions—is quite difficult to read when changes must be made.===Macros===Many assemblers support ''predefined macros'', and others support ''programmer-defined'' (and repeatedly re-definable) macros involving sequences of text lines in which variables and constants are embedded. This sequence of text lines may include opcodes or directives. Once a macro has been defined its name may be used in place of a mnemonic. When the assembler processes such a statement, it replaces the statement with the text lines associated with that macro, then processes them as if they existed in the source code file (including, in some assemblers, expansion of any macros existing in the replacement text).Since macros can have 'short' names but expand to several or indeed many lines of code, they can be used to make assembly language programs appear to be far shorter, requiring fewer lines of source code, as with higher level languages. They can also be used to add higher levels of structure to assembly programs, optionally introduce embedded debugging code via parameters and other similar features.Many assemblers have built-in (or ''predefined'') macros for system calls and other special code sequences, such as the generation and storage of data realized through advanced bitwise and [[Boolean data type|boolean]] operations used in gaming, software security, data management, and cryptography.Macro assemblers often allow macros to take [[parameter (computer science)|parameter]]s. Some assemblers include quite sophisticated macro languages, incorporating such high-level language elements as optional parameters, symbolic variables, conditionals, string manipulation, and arithmetic operations, all usable during the execution of a given macro, and allowing macros to save context or exchange information. Thus a macro might generate a large number of assembly language instructions or data definitions, based on the macro arguments. This could be used to generate record-style data structures or &quot;unrolled&quot; loops, for example, or could generate entire algorithms based on complex parameters. An organization using assembly language that has been heavily extended using such a macro suite can be considered to be working in a higher-level language, since such programmers are not working with a computer's lowest-level conceptual elements.Macros were used to customize large scale software systems for specific customers in the mainframe era and were also used by customer personnel to satisfy their employers' needs by making specific versions of manufacturer operating systems. This was done, for example, by systems programmers working with [[IBM]]'s Conversational Monitor System / Virtual Machine (CMS/VM) and with IBM's &quot;real time transaction processing&quot; add-ons, [[CICS]], Customer Information Control System,  and [[Airline Control Program|ACP]]/[[Transaction Processing Facility|TPF]], the airline/financial system that began in the 1970s and still runs many large [[computer reservations system]]s (CRS) and credit card systems today.It was also possible to use solely the macro processing abilities of an assembler to generate code written in completely different languages, for example, to generate a version of a program in COBOL using a pure macro assembler program containing lines of COBOL code inside assembly time operators instructing the assembler to generate arbitrary code.This was because, as was realized in the 1960s, the concept of &quot;macro processing&quot; is independent of the concept of &quot;assembly&quot;, the former being in modern terms more word processing, text processing, than generating object code. The concept of macro processing appeared, and appears, in the C programming language, which supports &quot;preprocessor instructions&quot; to set variables, and make conditional tests on their values. Note that unlike certain previous macro processors inside assemblers, the C preprocessor was not [[Turing completeness|Turing-complete]] because it lacked the ability to either loop or &quot;go to&quot;, the latter allowing programs to loop.Despite the power of macro processing, it fell into disuse in many high level languages (a major exception being C/C++) while remaining a perennial for assemblers.  This was because many programmers were rather confused by macro parameter substitution and did not disambiguate macro processing from assembly and execution{{Dubious|date=January 2010}}.Macro parameter substitution is strictly by name: at macro processing time, the value of a parameter is textually substituted for its name. The most famous class of bugs resulting was the use of a parameter that itself was an expression and not a simple name when the macro writer expected a name. In the macro:&lt;tt&gt;foo: macro aload a*b&lt;/tt&gt;the intention was that the caller would provide the name of a variable, and the &quot;global&quot; variable or constant b would be used to multiply &quot;a&quot;. If foo is called with the parameter &lt;tt&gt;a-c&lt;/tt&gt;, the macro expansion of &lt;tt&gt;load a-c*b&lt;/tt&gt; occurs.  To avoid any possible ambiguity, users of macro processors can parenthesize formal parameters inside macro definitions, or callers can parenthesize the input parameters.&lt;ref&gt;{{Cite web|url=http://msdn.microsoft.com/en-us/library/503x3e3s%28v=VS.90%29.aspx|title=Macros (C/C++), MSDN Library for Visual Studio 2008|publisher=Microsoft Corp.|accessdate=2010-06-22}}&lt;/ref&gt;PL/I and C/C++ feature macros, but this facility can only manipulate text.  On the other hand, homoiconic languages, such as [[Lisp (programming language)|Lisp]], [[Prolog]], and [[Forth (programming language)|Forth]], retain the power of assembly language macros because they are able to manipulate their own code as data.===Support for structured programming===Some assemblers have incorporated [[structured programming]] elements to encode execution flow. The earliest example of this approach was in the [[Concept-14 macro set]], originally proposed by Dr. H.D. Mills (March, 1970), and implemented by Marvin Kessler at IBM's Federal Systems Division, which extended the S/360 macro assembler with IF/ELSE/ENDIF and similar control flow blocks.&lt;ref&gt;{{Cite web|url=http://skycoast.us/pscott/software/mvs/concept14.html|title=Concept 14 Macros|publisher=MVS Software|accessdate=May 25, 2009}}&lt;/ref&gt; This was a way to reduce or eliminate the use of [[GOTO]] operations in assembly code, one of the main factors causing [[spaghetti code]] in assembly language. This approach was widely accepted in the early 80s (the latter days of large-scale assembly language use).A curious design was [[A-natural]], a &quot;stream-oriented&quot; assembler for 8080/[[Z80]] processors{{Citation needed|date=January 2009}} from [[Whitesmiths|Whitesmiths Ltd.]] (developers of the [[Unix]]-like [[Idris (operating system)|Idris]] operating system, and what was reported to be the first commercial [[C (programming language)|C]] [[compiler]]). The language was classified as an assembler, because it worked with raw machine elements such as opcodes, registers, and memory references; but it incorporated an expression syntax to indicate execution order. Parentheses and other special symbols, along with block-oriented structured programming constructs, controlled the sequence of the generated instructions. A-natural was built as the object language of a C compiler, rather than for hand-coding, but its logical syntax won some fans.There has been little apparent demand for more sophisticated assemblers since the decline of large-scale assembly language development.&lt;ref name=&quot;assembly-language?cat=technology&quot;&gt;{{Cite web|url=http://www.answers.com/topic/assembly-language?cat=technology|title=assembly language: Definition and Much More from Answers.com|accessdate=2008-06-19|author=Answers.com}}&lt;/ref&gt; In spite of that, they are still being developed and applied in cases where resource constraints or peculiarities in the target system's architecture prevent the effective use of higher-level languages.&lt;ref&gt;[http://neshla.sourceforge.net/ NESHLA: The High Level, Open Source, 6502 Assembler for the Nintendo Entertainment System]&lt;/ref&gt;==Use of assembly language=====Historical perspective===Assembly languages were first developed in the 1950s, when they were referred to as [[second generation programming language]]s. For example, SOAP (Symbolic Optimal Assembly Program) was a 1957 assembly language for the [[IBM 650]] computer.  Assembly languages eliminated much of the error-prone and time-consuming [[first-generation language|first-generation]] programming needed with the earliest computers, freeing programmers from tedium such as remembering numeric codes and calculating addresses. They were once widely used for all sorts of programming. However, by the 1980s (1990s on [[microcomputer]]s), their use had largely been supplanted by [[high-level language]]s{{Citation needed|date=November 2009}}, in the search for improved [[programming productivity]]. Today, although assembly language is almost always handled and generated by [[compiler]]s, it is still used for direct hardware manipulation, access to specialized processor instructions, or to address critical performance issues. Typical uses are [[device driver]]s, low-level [[embedded system]]s, and [[real-time computing|real-time]] systems.Historically, a large number of programs have been written entirely in assembly language. Operating systems were almost exclusively written in assembly language until the widespread acceptance of [[C (programming language)|C]] in the 1970s and early 1980s. Many commercial applications were written in assembly language as well, including a large amount of the IBM mainframe software written by large corporations. [[COBOL]] and [[FORTRAN]] eventually displaced much of this work, although a number of large organizations retained assembly-language application infrastructures well into the 90s.Most early microcomputers relied on hand-coded assembly language, including most operating systems and large applications. This was because these systems had severe resource constraints, imposed idiosyncratic memory and display architectures, and provided limited, buggy system services. Perhaps more important was the lack of first-class high-level language compilers suitable for microcomputer use. A psychological factor may have also played a role: the first generation of microcomputer programmers retained a hobbyist, &quot;wires and pliers&quot; attitude.In a more commercial context, the biggest reasons for using assembly language were minimal bloat (size), minimal overhead, greater speed, and reliability.Typical examples of large assembly language programs from this time are IBM PC [[DOS]] operating systems and early applications such as the [[spreadsheet]] program [[Lotus 1-2-3]], and almost all popular games for the [[Atari 800]] family of home computers. Even into the 1990s, most console video games were written in assembly, including most games for the [[Sega Mega Drive|Mega Drive/Genesis]] and the [[Super Nintendo Entertainment System]] {{Citation needed|date=February 2007}}. According to some industry insiders, the assembly language was the best computer language to use to get the best performance out of the [[Sega Saturn]], a console that was notoriously challenging to develop and program games for.&lt;ref&gt;[http://www.eidolons-inn.net/tiki-index.php?page=SegaBase+Saturn Eidolon's Inn : SegaBase Saturn&lt;!-- Bot generated title --&gt;]&lt;/ref&gt; The popular arcade game [[NBA Jam]] (1993) is another example. On the Commodore 64, Amiga, Atari ST, as well as ZX Spectrum home computers, assembler has long been the primary development language. This was in large part because BASIC dialects on these systems offered insufficient execution speed, as well as insufficient facilities to take full advantage of the available hardware on these systems. Some systems, most notably Amiga, even have IDEs with highly advanced debugging and macro facilities, such as the freeware [http://www.theflamearrows.info/homepage.html ASM-One assembler], comparable to that of [[Microsoft Visual Studio]] facilities (ASM-One predates Microsoft Visual Studio).''The Assembler for the [[VIC-20]]'' was written by Don French and published by ''French Silk''. At 1639 bytes in length, its author believes it is the smallest symbolic assembler ever written. The assembler supported the usual symbolic addressing and the definition of [[character string]]s or hex strings. It also allowed address expressions which could be combined with [[addition]], [[subtraction]], [[multiplication]], [[division (mathematics)|division]], [[logical AND]], [[logical OR]], and [[exponentiation]] operators.&lt;ref&gt;{{Cite web|url=http://www.radiks.net/~jimbo/art/int7.htm|title=Speaking with Don French : The Man Behind the French Silk Assembler Tools|date=2004-05-21|accessdate=2008-07-25|author=Jim Lawless|publisher=}}&lt;/ref&gt;===Current usage===There have always been debates over the usefulness and performance of assembly language relative to high-level languages. Assembly language has specific niche uses where it is important; see below. But in general, modern [[optimizing compiler]]s are claimed{{Citation needed|date=March 2010}} to render high-level languages into code that can run as fast as hand-written assembly, despite the counter-examples that can be found.&lt;ref name=&quot;goto&quot;&gt;{{Cite web|url=http://www.nytimes.com/2005/11/28/technology/28super.html?_r=1 |title=Writing the Fastest Code, by Hand, for Fun: A Human Computer Keeps Speeding Up Chips |publisher=New York Times, John Markoff |date=2005-11-28 |accessdate=2010-03-04}}&lt;/ref&gt;&lt;ref name=&quot;bit-fild&quot;&gt;{{Cite web|url=http://hardwarebug.org/2010/01/30/bit-field-badness/ |title=Bit-field-badness |publisher=hardwarebug.org |date=2010-01-30 |accessdate=2010-03-04}}&lt;/ref&gt;&lt;ref name=&quot;gcc-mess&quot;&gt;{{Cite web|url=http://hardwarebug.org/2009/05/13/gcc-makes-a-mess/ |title=GCC makes a mess |publisher=hardwarebug.org |date=2009-05-13 |accessdate=2010-03-04}}&lt;/ref&gt; The complexity of modern processors and memory sub-system makes effective optimization increasingly difficult for compilers, as well as assembly programmers.&lt;ref name=&quot;GreatDebate1&quot;&gt;{{Cite web|url=http://webster.cs.ucr.edu/Page_TechDocs/GreatDebate/debate1.html|title=The Great Debate|date=|accessdate=2008-07-03|author=Randall Hyde}}&lt;/ref&gt;&lt;ref name=&quot;compiler-fails1&quot;&gt;{{Cite web|url=http://hardwarebug.org/2008/11/28/codesourcery-fails-again/ |title=Code sourcery fails again|publisher=hardwarebug.org |date=2010-01-30 |accessdate=2010-03-04}}&lt;/ref&gt; Moreover, and to the dismay of efficiency lovers, increasing processor performance has meant that most CPUs sit idle most of the time,{{Citation needed|reason=Mainframes normally run with a high CPU loading factor.|date=January 2011}} with delays caused by predictable bottlenecks such as [[I/O]] operations and [[paging]]. This has made raw code execution speed a non-issue for many programmers.There are some situations in which practitioners might choose to use assembly language, such as when:* a stand-alone binary executable of compact size is required, i.e. one that must execute without recourse to the [[Run-time system|run-time]] components or [[library (computer science)|libraries]] associated with a high-level language; this is perhaps the most common situation. These are embedded single-tasking programs, and use only a relatively small amount of memory. Examples include firmware for telephones, automobile fuel and ignition systems, air-conditioning control systems, security systems, and sensors.** particularly, a system with severe resource constraints (e.g., an [[embedded system]]) must be hand-coded to maximize the use of limited resources; but this is becoming less common as processor price decreases and performance improves.* interacting directly with the hardware, for example in [[device driver]]s and [[interrupt handler]]s.* using processor-specific instructions not implemented in a compiler. A common example is the [[circular shift|bitwise rotation]] instruction at the core of many encryption algorithms.* creating vectorized functions for programs in higher-level languages such as C.  In the higher-level language this is sometimes aided by compiler [[intrinsic function]]s which map directly to SIMD mnemonics, but nevertheless result in a one-to-one assembly conversion specific for the given vector processor.* extreme optimization is required, e.g., in an inner [[Control_flow#Loops|loop]] in a processor-intensive algorithm. [[Game programmer]]s take advantage of the abilities of hardware features in systems, enabling games to run faster. Also large scientific simulations require highly optimized algorithms, e.g. [[linear algebra]] with [[Basic Linear Algebra Subprograms|BLAS]]&lt;ref name=&quot;goto&quot;/&gt;&lt;ref name=&quot;bench&quot;&gt;{{cite web|url=http://eigen.tuxfamily.org/index.php?title=Benchmark-August2008 |title=BLAS Benchmark-August2008 |publisher=eigen.tuxfamily.org |date=2008-08-01 |accessdate=2010-03-04}}&lt;/ref&gt; or [[DCT (math)|discrete cosine transformation]] (e.g. [[SIMD]] assembly version from [[x264]]&lt;ref&gt;{{cite web|url=http://git.videolan.org/?p=x264.git;a=tree;f=common/x86;hb=HEAD |title=x264.git/common/x86/dct-32.asm |publisher=git.videolan.org |date=2010-09-29 |accessdate=2010-09-29}}&lt;/ref&gt;)* no high-level language exists, on a new or specialized processor, for example.* programs need precise timing such as** [[real-time computing|real-time]] programs that need precise timing and responses, such as simulations, flight navigation systems, and medical equipment. For example, in a [[fly-by-wire]] system, telemetry must be interpreted and acted upon within strict time constraints. Such systems must eliminate sources of unpredictable delays, which may be created by (some) interpreted languages, automatic [[garbage collection (computer science)|garbage collection]], paging operations, or [[preemptive multitasking]]. However, some higher-level languages incorporate run-time components and operating system interfaces that can introduce such delays. Choosing assembly or lower-level languages for such systems gives programmers greater visibility and control over processing details.** cryptographic algorithms that must always take strictly the same time to execute, preventing [[timing attack]]s.* complete control over the environment is required, in extremely high security situations where [[Trusting trust#Reflections on Trusting Trust|nothing can be taken for granted]].* writing [[computer virus]]es, [[bootloader]]s, certain [[device driver]]s, or other items very close to the hardware or low-level operating system.* writing [[instruction set simulator]]s for monitoring, tracing and [[debugging]] where additional overhead is kept to a minimum* [[reverse-engineering]] and modifying program files such as**existing [[binary file|binaries]] that may or may not have originally been written in a high-level language, for example when trying to recreate programs for which source code is not available or has been lost, or cracking copy protection of proprietary software.** [[video game]]s (also termed [[ROM hacking]]), which is possible via several methods. The most widely employed is altering program code at the assembly language level.* writing [[self modifying code]], to which assembly language lends itself well.* writing [[calculator gaming|games]] and other software for [[graphing calculator]]s.&lt;ref&gt;{{Cite web|url=http://tifreakware.net/tutorials/89/a/calc/fargoii.htm|title=68K Programming in Fargo II|date=|accessdate=2008-07-03|author=}}&lt;/ref&gt;* writing compiler software that generates assembly code; the programmers must be expert assembly language programmers to generate correct assembly code.Assembly language is still taught in most [[computer science]] and [[electronic engineering]] programs. Although few programmers today regularly work with assembly language as a tool, the underlying concepts remain very important. Such fundamental topics as [[binary arithmetic]], [[memory allocation]], [[stack (data structure)|stack processing]], [[character set]] encoding, [[interrupt]] processing, and [[compiler]] design would be hard to study in detail without a grasp of how a computer operates at the hardware level. Since a computer's behavior is fundamentally defined by its instruction set, the logical way to learn such concepts is to study an assembly language. Most modern computers have similar instruction sets. Therefore, studying a single assembly language is sufficient to learn: I) the basic concepts; II) to recognize situations where the use of assembly language might be appropriate; and III) to see how efficient executable code can be created from high-level languages.&lt;ref&gt;{{Cite web|url=http://www.arl.wustl.edu/~lockwood/class/cs306/books/artofasm/fwd.html|title=Foreword (&quot;Why would anyone learn this stuff?&quot;), ''op. cit.''|date=1996-09-30|accessdate=2010-03-05|author=Hyde, Randall}}&lt;/ref&gt; This is analogous to children needing to learn the basic arithmetic operations (e.g., long division), although [[calculator]]s are widely used for all except the most trivial calculations.===Typical applications===Hard-coded assembly language is typically used in a system's [[boot ROM]] ([[BIOS]] on IBM-compatible [[Personal Computer|PC]] systems). This low-level code is used, among other things, to initialize and test the system hardware prior to booting the OS, and is stored in [[Read-only memory|ROM]]. Once a certain level of hardware initialization has taken place, execution transfers to other code, typically written in higher level languages; but the code running immediately after power is applied is usually written in assembly language. The same is true of most [[boot loader]]s.Many compilers render high-level languages into assembly first before fully compiling, allowing the assembly code to be viewed for [[debug]]ging and optimization purposes. Relatively low-level languages, such as [[C (programming language)|C]], often provide special [[syntax of programming languages|syntax]] to embed assembly language directly in the source code. Programs using such facilities, such as the [[Linux kernel]], can then construct abstractions using different assembly language on each hardware platform. The system's [[software portability|portable]] code can then use these processor-specific components through a uniform interface.Assembly language is also valuable in [[reverse engineering]], since many programs are distributed only in machine code form, and machine code is usually easy to translate into assembly language and carefully examine in this form, but very difficult to translate into a higher-level language. Tools such as the [[Interactive Disassembler]] make extensive use of disassembly for such a purpose.One niche that makes use of assembly language is the [[demoscene]]. Certain competitions require contestants to restrict their creations to a very small size (e.g. 256[[Bytes|B]], 1[[Kilobyte|KB]], 4KB or 64 KB), and assembly language is the language of choice to achieve this goal.&lt;ref&gt;{{Cite web|url=http://web.archive.org/web/20080211025322rn_1/www.256b.com/home.php|title=256bytes demos archives|date=|accessdate=2008-07-03|author=}}&lt;/ref&gt; When resources, especially CPU processing-constrained systems, like the earlier [[Amiga]] models, and the [[Commodore 64]], are a concern, assembler coding is a must. Optimized assembler code is written &quot;by hand&quot; and instructions are sequenced manually by [[programmer]]s in an attempt to minimize the number of CPU cycles used. The CPU constraints are so great that every CPU cycle counts. However, using such methods has enabled systems like the Commodore 64 to produce real-time [[3D graphics]] with advanced effects, a feat which might be considered unlikely or even impossible for a system with a 1.02[[MHz]] processor. {{Citation needed|date=September 2009}}==Related terminology==&lt;!-- This section is linked from [[Assembly language]] --&gt;* '''Assembly language''' or '''assembler language''' is commonly called '''assembly''', '''assembler''', '''ASM''', or '''symbolic machine code'''. A generation of IBM mainframe programmers called it '''ALC''' for ''Assembly Language Code'' or '''BAL'''&lt;ref&gt;Techically BAL was only the assembler for '''BPS'''; the others were macro assemblers.&lt;/ref&gt; for ''Basic Assembly Language''.:: Note: Calling the language '''assembler''' is of course potentially confusing and ambiguous, since this is also the name of the utility program that translates assembly language statements into machine code. Some may regard this as imprecision or error. However, this usage has been common among professionals and in the literature for decades.&lt;ref&gt;Stroustrup, Bjarne, ''The C++ Programming Language'', Addison-Wesley, 1986, ISBN 0-201-12078-X: ''&quot;C++ was primarily designed so that the author and his friends would not have to program in assembler, C, or various modern high-level languages.'' [use of the term ''assembler'' to mean ''assembly language'']&quot;&lt;/ref&gt; Similarly, some early computers called their ''assembler'' their '''assembly program'''.&lt;ref&gt;Saxon, James, and Plette, William, ''Programming the IBM 1401'', Prentice-Hall, 1962, LoC 62-20615. [use of the term ''assembly program'']&lt;/ref&gt;)* The computational step where an assembler is run, including all macro processing, is termed '''assembly time'''.* The use of the word '''assembly''' dates from the early years of computers (''cf.'' [[Short Code (Computer language)|short code]], [[speedcoding|speedcode]]).* {{anchor|Cross assembler}}A '''cross assembler''' (see [[cross compiler]]) is functionally just an assembler. This term is used to stress that the assembler is run on a computer or [[operating system]] of different  type and incompatible with the system on which the resulting code is to run. Cross-assembling may be necessary if the target system cannot run an assembler itself, as is typically the case for small embedded systems. A cross assembler must provide for or interface to facilities to transport the code to the target processor, e.g. to reside in flash or EPROM memory. It generates a binary image, or [[Intel HEX]] file rather than an [[object file]].* An '''assembler directive''' or ''pseudo-opcode'' is a command given to an assembler. These directives may do anything from telling the assembler to include other source files, to telling it to allocate memory for constant data.==List of assemblers for different computer architectures==The following page has a list of different assemblers for the different computer architectures, along with any associated information for that specific assembler:* [[List of assemblers]]==Further details==For any given personal computer, mainframe, embedded system, and game console, both past and present, at least one – possibly dozens – of assemblers have been written. For some examples, see the [[list of assemblers]].On [[Unix]] systems, the assembler is traditionally called [[as (Unix)|as]], although it is not a single body of code, being typically written anew for each port. A number of Unix variants use [[GNU Assembler|GAS]].Within processor groups, each assembler has its own dialect. Sometimes, some assemblers can read another assembler's dialect, for example, [[TASM]] can read old [[MASM]] code, but not the reverse. [[FASM]] and [[Netwide Assembler|NASM]] have similar syntax, but each support different macros that could make them difficult to translate to each other. The basics are all the same, but the advanced features will differ.&lt;ref name=&quot;Hyde&quot;&gt;{{Cite web|url = http://webster.cs.ucr.edu/AsmTools/WhichAsm.html|title = Which Assembler is the Best? |accessdate = 2007-10-19|author = Randall Hyde}}&lt;/ref&gt;Also, assembly can sometimes be portable across different operating systems on the same type of [[CPU]]. [[Calling convention]]s between operating systems often differ slightly or not at all, and with care it is possible to gain some portability in assembly language, usually by linking with a [[C (programming language)|C]] library that does not change between operating systems. An  [[instruction set simulator]] (which would ideally be written in an assembler language) can, in theory, process the [[object code]]/ [[binary file|binary]] of ''any'' assembler to achieve portability even across [[platform (computing)|platform]]s (with an overhead no greater than a typical bytecode interpreter). This is essentially what microcode achieves when a hardware platform changes internally.For example, many things in [[libc]] depend on the preprocessor to do OS-specific, C-specific things to the program before compiling. In fact, some functions and symbols are not even guaranteed to exist outside of the preprocessor. Worse, the size and field order of structs, as well as the size of certain [[typedef]]s such as off_t, are entirely unavailable in assembly language without help from a [[configure script]], and differ even between versions of [[Linux]], making it impossible to portably call functions in libc other than ones that only take simple integers and pointers as parameters. To address this issue, [[FASMLIB]] project provides a portable assembly library for Win32 and Linux platforms, but it is yet very incomplete.&lt;ref name=&quot;FASMLIB&quot;&gt;{{Cite web|url = http://fasmlib.x86asm.net/features.html|title = FASMLIB: Features|accessdate = 2007-10-19|author = &quot;''vid''&quot;}}&lt;/ref&gt;Some higher level computer languages, such as [[C (programming language)|C]] and [[Borland Pascal]], support [[inline assembler|inline assembly]] where sections of assembly code, in practice usually brief, can be embedded into the high level language code. The [[Forth (programming language)|Forth]] language commonly contains an assembler used in CODE words.An [[emulator]] can be used to debug assembly-language programs.==Example listing of assembly language source code==&lt;!-- This is a really poor example of an assembly language program for learning what assembler is. Showing the actual binary code , rather than (conventionally) its hex equivalent and bundling opcodes together with their operands makes it really hard to read and understand. There are also no comments on the statements which IMHO is a serious ommision from most standpoints. Please look at an [[IBM/360]] assembler to see how it should be done (eg. &quot;loop unwinding&quot; article – dynamic loop unwinding example) --&gt;{| class=&quot;wikitable&quot;! Address! Label! Instruction (AT&amp;T syntax)! Object code&lt;ref name=Murdocca&gt;{{Cite book| first=Miles J.| last=Murdocca| coauthors=Vincent P. Heuring| year=2000| title=Principles of Computer Architecture| publisher=Prentice-Hall| isbn=0-201-43664-7}}&lt;/ref&gt;|-|||&lt;tt&gt;.begin&lt;/tt&gt;||-|||&lt;tt&gt;.org 2048&lt;/tt&gt;||-||&lt;tt&gt;a_start&lt;/tt&gt;|&lt;tt&gt;.equ 3000&lt;/tt&gt;||-|&lt;tt&gt;2048&lt;/tt&gt;||&lt;tt&gt;ld length,%&lt;/tt&gt;|-|&lt;tt&gt;2064&lt;/tt&gt;||&lt;tt&gt;be done&lt;/tt&gt;|&lt;tt&gt;00000010 10000000 00000000 00000110&lt;/tt&gt;|-|&lt;tt&gt;2068&lt;/tt&gt;||&lt;tt&gt;addcc %r1,-4,%r1&lt;/tt&gt;|&lt;tt&gt;10000010 10000000 01111111 11111100&lt;/tt&gt;|-|&lt;tt&gt;2072&lt;/tt&gt;||&lt;tt&gt;addcc %r1,%r2,%r4&lt;/tt&gt;|&lt;tt&gt;10001000 10000000 01000000 00000010&lt;/tt&gt;|-|&lt;tt&gt;2076&lt;/tt&gt;||&lt;tt&gt;ld %r4,%r5&lt;/tt&gt;|&lt;tt&gt;11001010 00000001 00000000 00000000&lt;/tt&gt;|-|&lt;tt&gt;2080&lt;/tt&gt;||&lt;tt&gt;ba loop&lt;/tt&gt;|&lt;tt&gt;00010000 10111111 11111111 11111011&lt;/tt&gt;|-|&lt;tt&gt;2084&lt;/tt&gt;||&lt;tt&gt;addcc %r3,%r5,%r3&lt;/tt&gt;|&lt;tt&gt;10000110 10000000 11000000 00000101&lt;/tt&gt;|-|&lt;tt&gt;2088&lt;/tt&gt;|&lt;tt&gt;done:&lt;/tt&gt;|&lt;tt&gt;jmpl %r15+4,%r0&lt;/tt&gt;|&lt;tt&gt;10000001 11000011 11100000 00000100&lt;/tt&gt;|-|&lt;tt&gt;2092&lt;/tt&gt;|&lt;tt&gt;length:&lt;/tt&gt;|&lt;tt&gt;20&lt;/tt&gt;|&lt;tt&gt;00000000 00000000 00000000 00010100&lt;/tt&gt;|-|&lt;tt&gt;2096&lt;/tt&gt;|&lt;tt&gt;address:&lt;/tt&gt;|&lt;tt&gt;a_start&lt;/tt&gt;|&lt;tt&gt;00000000 00000000 00001011 10111000&lt;/tt&gt;|-|||&lt;tt&gt;.org a_start&lt;/tt&gt;||-|&lt;tt&gt;3000&lt;/tt&gt;|&lt;tt&gt;a:&lt;/tt&gt;|}Example of a selection of instructions (for a [[Universal Virtual Computer|virtual computer]]&lt;ref name=wwwPOCA&gt;[http://iiusatech.com/~murdocca/POCA Principles of Computer Architecture] (POCA) &amp;ndash; ARCTools virtual computer available for download to execute referenced code, accessed August 24, 2005&lt;/ref&gt;) with thecorresponding [[memory address|address]] in memory where each instruction will be placed. These addresses are not static, see [[memory management]].Accompanying each instruction is the generated (by the assembler) [[object file|object code]] that coincides with the virtual computer's architecture (or [[Instruction set|ISA]]).==See also==* [[Compiler]]* [[Disassembler]]* [[Instruction set]]* [[Little man computer]] – an educational computer model with a base-10 assembly language* [[Microassembler]]* [[Typed assembly language]]==References=={{Reflist|colwidth=30em}}==Further reading==* [http://www.asmcommunity.net/book/ ''ASM Community Book''] &quot;An online book full of helpful ASM info, tutorials and code examples&quot; by the ASM Community* Jonathan Bartlett: ''[http://programminggroundup.blogspot.com/ Programming from the Ground Up]''. Bartlett Publishing, 2004. ISBN 0-9752838-4-7&lt;br /&gt;Also available online [http://download.savannah.gnu.org/releases-noredirect/pgubook/ProgrammingGroundUp-1-0-booksize.pdf as PDF]* Robert Britton: ''MIPS Assembly Language Programming''. Prentice Hall, 2003. ISBN 0-13-142044-5* Paul Carter: ''PC Assembly Language''. Free ebook, 2001.&lt;br /&gt;[http://drpaulcarter.com/pcasm/ Website]* Jeff Duntemann: ''Assembly Language Step-by-Step''. Wiley, 2000. ISBN 0-471-37523-3* Randall Hyde: ''The Art of Assembly Language''. No Starch Press, 2003. ISBN 1-886411-97-2&lt;br /&gt;Draft versions [http://webster.cs.ucr.edu/AoA/index.html available online] as PDF and HTML* Peter Norton, John Socha, ''Peter Norton's Assembly Language Book for the IBM PC'', Brady Books, NY: 1986.* Michael Singer, ''PDP-11. Assembler Language Programming and Machine Organization'', John Wiley &amp; Sons, NY: 1980.* Dominic Sweetman: ''See MIPS Run''. Morgan Kaufmann Publishers, 1999. ISBN 1-55860-410-3* John Waldron: ''Introduction to RISC Assembly Language Programming''. Addison Wesley, 1998. ISBN 0-201-39828-1==External links=={{External links|date=January 2010}}{{Wiktionary|assembly language}}{{Wikibooks|Subject:Assembly languages}}* [http://arm.flatassembler.net FASMARM] 1.13 – FASM for ARM processors &lt;small&gt;''04-Nov-2008''&lt;/small&gt;* [http://webster.cs.ucr.edu/AoA/index.html Randall Hyde's The Art of Assembly Language as HTML and PDF version]* [http://www.atariarchives.org/mlb/introduction.php Machine language for beginners]* [http://www.swansontec.com/sprogram.htm Introduction to assembly language]* [http://www.asmcommunity.net/ The ASM Community], a programming resource about assembly including an [http://www.asmcommunity.net/book/ ASM Book]* [http://www.jegerlehner.ch/intel/IntelCodeTable.pdf Intel Assembly 80x86 CodeTable] (a cheat sheet reference)* [http://www.int80h.org/ Unix Assembly Language Programming]* [http://www-03.ibm.com/systems/z/os/zos/bkserv/r8pdf/index.html#zarchpops IBM z/Architecture Principles of Operation] IBM manuals on [[Mainframe computer|mainframe]] machine language and internals.* [http://www-03.ibm.com/systems/z/os/zos/bkserv/r8pdf/index.html#hlasm IBM High Level Assembler] IBM manuals on mainframe assembler language.* [http://c2.com/cgi/wiki?LearningAssemblyLanguage PPR: Learning Assembly Language]* [http://siyobik.info/main/documents/view/x86-tutorial/ An Introduction to Writing 32-bit Applications Using the x86 Assembly Language]* [http://www.azillionmonkeys.com/qed/asmexample.html Assembly Language Programming Examples]* [http://www.grc.com/smgassembly.htm Authoring Windows Applications In Assembly Language]* [http://linuxassembly.org/ Information on Linux assembly programming]* [http://siyobik.info/main/reference x86 Instruction Set Reference]* [http://win32assembly.online.fr/tutorials.html Iczelion's Win32 Assembly Tutorial]* [http://mark.masmcode.com/ Assembly Optimization Tips] by Mark Larson* [http://nasm.sourceforge.net/doc/nasmdoc0.html NASM Manual]* [http://www.xs4all.nl/~smit/asm01001.htm#index1 8086 assembly coding] by F.A. Smit* [http://www.microautomate.com/PIC/lets-begin-assembly.html Microchip PIC assembly coding basics]* [http://www.softools.com/sasmzilog.htm Z80/Z180/8085 Assembler]{{Programming language}}{{DEFAULTSORT:Assembly Language}}[[Category:Assembly languages|*Assembly language]][[Category:Assemblers|*Assembler]][[Category:Programming language implementation]][[ar:لغة تجميع]][[bn:অ্যাসেম্বলি ভাষা]][[bs:Assembler]][[bg:Асемблер]][[ca:Llenguatge assemblador]][[cs:Jazyk symbolických adres]][[da:Assemblersprog]][[de:Assemblersprache]][[et:Assemblerkeel]][[el:Assembly (γλώσσα προγραμματισμού)]][[es:Lenguaje ensamblador]][[eo:Asembla lingvo]][[fa:اسمبلی]][[fr:Assembleur]][[ko:어셈블리어]][[hi:असेम्बली भाषा]][[hr:Asemblerski jezik]][[id:Bahasa rakitan]][[is:Smalamál]][[it:Assembly]][[he:שפת סף]][[ka:ასემბლი]][[kk:Ассемблерлеу тілі]][[lv:Asamblervaloda]][[lt:Asemblerio kalba]][[hu:Assembly]][[ms:Bahasa himpunan]][[nl:Assembler#Assembly]][[ja:アセンブリ言語]][[no:Assembler]][[pl:Asembler#Język asemblera]][[pt:Assembly]][[ro:Limbaj de asamblare]][[ru:Язык ассемблера]][[sq:Assembly]][[si:ඇසෙම්බ්ලි භාෂාව]][[sim